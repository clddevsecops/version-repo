name: Build Info

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch'
        required: false
      target_tenant:
        description: 'Target tenant'
        required: false
      target_environment:
        description: 'Target environment'
        required: false
      increment_patch_number:
        description: 'Increment patch number'
        required: false
        default: false

permissions:
  contents: write

env:
  BASE_VERSION: "8.9.0"
  TECHNICAL_VERSION: "8.9"
  MAJOR_VERSION: "8"
  MINOR_VERSION: "9"
  MARKETING_VERSION: "2022.1"
  PRE_RELEASE_TAG: "-maint"
  RELEASE_STREAM: "release/8.9"
  TARGET_BRANCH: ${{ github.event.inputs.target_branch || 'release/8.9' }}
  TARGET_TENANT: ${{ github.event.inputs.target_tenant || 'CiniWorld - 99Monthly' }}
  TARGET_ENVIRONMENT: ${{ github.event.inputs.target_environment || 'QA' }}

jobs:
  build-info:
    runs-on: ubuntu-latest
    outputs:
      build-name: ${{ steps.set-build-info.outputs.build-name }}
      registry-path: ${{ steps.set-build-info.outputs.registry-path }}
      registry-path-msi: ${{ steps.set-build-info.outputs.registry-path-msi }}
      major-version: ${{ steps.set-build-info.outputs.major-version }}
      minor-version: ${{ steps.set-build-info.outputs.minor-version }}
      patch-number: ${{ steps.set-build-info.outputs.patch-number }}
      build-number: ${{ steps.set-build-info.outputs.build-number }}
      product-release-stream: ${{ steps.set-build-info.outputs.product-release-stream }}
      target-branch: ${{ steps.set-build-info.outputs.target-branch }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ secrets.PAT }}
          fetch-depth: 0
          lfs: false

      - name: Get Current Patch Number
        run: |
          GITHUB_TAG_PATTERN="${{ env.TECHNICAL_VERSION }}.[0-9]*${{ env.PRE_RELEASE_TAG }}.*"
          echo "GITHUB_TAG_PATTERN=$GITHUB_TAG_PATTERN"

          GITHUB_TAG=$(git describe --tags --abbrev=0 --match="${GITHUB_TAG_PATTERN}" 2>/dev/null | awk 'NR==1{print $1}')
          echo "Found github tag=$GITHUB_TAG"

          if [ -z "$GITHUB_TAG" ]; then
            PATCH_NUMBER=0
            echo "No existing tag found, set PATCH_NUMBER=0"
          else
            PATCH_NUMBER=$(echo $GITHUB_TAG | sed -E "s/${{ env.TECHNICAL_VERSION }}\.([0-9]+).*/\1/")
            echo "Extracted PATCH_NUMBER=$PATCH_NUMBER from $GITHUB_TAG"
          fi

          echo "PATCH_NUMBER=$PATCH_NUMBER" >> $GITHUB_ENV

      - name: Get Incremented Patch Number
        if: ${{ inputs.increment_patch_number == 'true' }}
        run: |
          PATCH_NUMBER=$(( PATCH_NUMBER + 1 ))
          echo "Incremented PATCH_NUMBER=$PATCH_NUMBER"
          echo "PATCH_NUMBER=$PATCH_NUMBER" >> $GITHUB_ENV

      - name: Set Build Info
        id: set-build-info
        run: |
          if [ $PATCH_NUMBER -eq 0 ]; then
            PATCH_NUMBER=1
          fi

          VERSION_PREFIX="${{ env.TECHNICAL_VERSION }}.${PATCH_NUMBER}${{ env.PRE_RELEASE_TAG }}"
          echo "VERSION_PREFIX=$VERSION_PREFIX"

          DATE_PATTERN=$(date "+%y%m%d")
          echo "DATE_PATTERN=$DATE_PATTERN"

          GITHUB_TAG_PATTERN="${VERSION_PREFIX}\.${DATE_PATTERN}[0-9]*"
          echo "GITHUB_TAG_PATTERN=$GITHUB_TAG_PATTERN"

          # Fetch the last build tag for the day
          LAST_BUILD_TAG=$(git tag -l "${GITHUB_TAG_PATTERN}" | sort -V | tail -n 1)
          echo "Last build tag for today: $LAST_BUILD_TAG"

          if [ -z "$LAST_BUILD_TAG" ]; then
            BUILD_NO=1
            echo "No existing build tag found for today, set BUILD_NO=1"
          else
            LAST_BUILD_NO=$(echo $LAST_BUILD_TAG | sed -E "s/.*\.([0-9]+)$/\1/")
            echo "Extracted LAST_BUILD_NO=$LAST_BUILD_NO"
            BUILD_NO=$(( LAST_BUILD_NO + 1 ))
            echo "Incremented BUILD_NO=$BUILD_NO based on last build tag $LAST_BUILD_TAG"
          fi

          echo "major-version=${{ env.MAJOR_VERSION }}" >> $GITHUB_OUTPUT
          echo "minor-version=${{ env.MINOR_VERSION }}" >> $GITHUB_OUTPUT
          BUILD_NAME="${VERSION_PREFIX}.${DATE_PATTERN}${BUILD_NO}"
          echo "BUILD_NAME=$BUILD_NAME"

          REGISTRY_PATH="appraisal-generic-local/CiniWorld/${{ env.RELEASE_STREAM }}/${BUILD_NAME}"
          REGISTRY_PATH_MSI="appraisal-generic-local/CiniWorld/ExePrograms"

          echo "Registry Path: $REGISTRY_PATH"
          echo "Registry Path MSI: $REGISTRY_PATH_MSI"
          echo "registry-path=$REGISTRY_PATH" >> $GITHUB_OUTPUT
          echo "registry-path-msi=$REGISTRY_PATH_MSI" >> $GITHUB_OUTPUT
          echo "Build Name: $BUILD_NAME"
          echo "BUILD_NAME=$BUILD_NAME" >> $GITHUB_ENV
          echo "build-name=$BUILD_NAME" >> $GITHUB_OUTPUT
          echo "build-number=$BUILD_NO" >> $GITHUB_OUTPUT
          echo "patch-number=$PATCH_NUMBER" >> $GITHUB_OUTPUT
          echo "product-release-stream=${{ env.RELEASE_STREAM }}" >> $GITHUB_OUTPUT
          echo "target-branch=${{ env.TARGET_BRANCH }}" >> $GITHUB_OUTPUT

      - name: Set up Git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Unset default GITHUB_TOKEN and set PAT
        env:
          ACTIONS_PAT: ${{ secrets.PAT }}
          token: ${{ secrets.PAT }}
        run: |
          unset GITHUB_TOKEN
          echo "Unset default GITHUB_TOKEN"
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
          echo "Set remote URL with PAT"

      - name: Add and push tag
        env:
          token: ${{ secrets.PAT }}
        run: |
          tag="$BUILD_NAME"
          echo "Creating tag: $tag"
          git tag -a $tag -m "tagged by build"
          git push origin $tag
          echo "Pushed tag: $tag"
